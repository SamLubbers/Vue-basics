<% extend('../layout') %>

<link rel="stylesheet" href="/stylesheets/game.css">
<div class="container caps" id="app">
<div class="row" id="players">
  <div class="col-6 center">
		<h2>You</h2>
		<div class="rectangle">
			<div class="healthbar" :style="{width: playerhealth + '%'}">
			</div>
		</div>
  </div>
	<div class="col-6 center">
		<h2 class="caps">Bot</h2>
		<div class="rectangle">
			<div class="healthbar" :style="{width: bothealth + '%'}">
			</div>
		</div>
	</div>
</div>
<div class="row shadowed spaced" id="controls">
  <div class="col-12 center justify">
		<template v-if='newgame'>
			<button class="btn btn-success" @click='newgame = !newgame'>
				start new game
			</button>
		</template>
		<template v-else>
			<button class="btn btn-danger" @click='playerAttack'>attack</button>
			<button class="btn btn-warning" @click='playerSpecialAttack'>special attack</button>
			<button class="btn btn-success" @click='playerHeal'>heal</button>
			<button class="btn btn-secondary" @click='newgame = !newgame'>
				give up
			</button>
		</template>
  </div>
</div>
<template v-if='!newgame && record.length > 0'>
	<div class="row shadowed spaced" id="record">
	  <div class="col-12 center">
			<template v-for='action in recordChronologicalOrder'>
				<div class="alert" :class="action.attacker == 'player' ? 'alert-primary' : 'alert-danger'">
					<template v-if="action.type == 'attack'">
						{{action.attacker}} hits {{action.receiver}} with {{action.force}}
					</template>
					<template v-else>
						{{action.attacker}} heals himself with {{action.force}}
					</template>
				</div>
			</template>
</template>
</div>

<script type="text/javascript">
  var app = new Vue({
    el: '#app',
    data: {
			newgame: true,
			minhealth: 0,
			maxhealth: 100,
			playerhealth: 100,
			bothealth: 100,
      playerAttackMaxforce: 5,
      playerAttackSpecialMaxforce: 15,
      playerHealMaxForce: 7,
      botAttackMaxForce: 10,
			record: [],
    },
    computed:{
      recordChronologicalOrder: function(){
        return this.record.reverse();
      }
    },
    watch:{
      newgame: function(newgame){
        if(newgame){
          this.playerhealth = this.maxhealth;
          this.bothealth = this.maxhealth;
          this.record = [];
        }
      },
      playerhealth: function(playerhealth){
        if(playerhealth <= 0){
          this.playerhealth = 0;
          alert('bot wins!')
          this.newgame = true;
        }
        else if(playerhealth > 100){
          this.playerhealth = 100;
        }
      },
      bothealth: function(bothealth){
        if(bothealth <= 0){
          this.bothealth = 0;
          alert('player wins!')
          this.newgame = true;
        }
        else if(bothealth > 100){
          this.bothealth = 100;
        }
      }
    },
    methods: {
      recordAction(type, attacker, receiver, force){
        newrecord = {
          'type':type,
          'attacker':attacker,
          'receiver':receiver,
          'force': force
        };
        this.record.push(newrecord);
      },
      computeForce(maxforce){
        return Math.round(Math.random() * maxforce);
      },
      botattack(){
        force = this.computeForce(this.botAttackMaxForce);
        this.playerhealth -= force;
        this.recordAction('attack', "bot", "player", force);
      },
      playerAttack(){
        force = this.computeForce(this.playerAttackMaxforce);
        this.bothealth -= force;
        this.recordAction('attack', "player", "bot", force);
        this.botattack();
      },
      playerSpecialAttack(){
        force = this.computeForce(this.playerAttackSpecialMaxforce);
        this.bothealth -= force;
        this.recordAction('attack', "player", "bot", force);
        this.botattack();
      },
      playerHeal(){
        force = this.computeForce(this.playerHealMaxForce);
        this.playerhealth += force;
        this.recordAction('heal', "player", null, force);
        this.botattack();
      }
    }
  });
</script>
